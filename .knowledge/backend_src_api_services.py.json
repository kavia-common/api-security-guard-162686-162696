{"is_source_file": true, "format": "Python", "description": "This file defines the DetectionService class, which orchestrates various security detections (shadow API detection, anomaly detection, OWASP static rule checks) for API security monitoring. It manages external dependencies such as repositories, detectors, and rule check functions, and implements logic to create security findings based on detected issues.", "external_files": ["storage.py", "models.py", "shadow_detector.py", "anomaly_detector.py", "owasp_rules.py", "remediator.py", "threat_intel.py"], "external_methods": ["storage.APIDescriptorRepository.list", "models.EventRecord", "models.FindingSeverity", "shadow_detector.ShadowAPIDetector.detect", "anomaly_detector.AnomalyDetector.observe", "owasp_rules.check_sensitive_header_leak", "owasp_rules.check_sensitive_path_method", "owasp_rules.check_large_payload", "remediator.Remediator.for_rule"], "published": ["DetectionService"], "classes": [{"name": "DetectionService", "description": "Coordinates multiple security detection mechanisms on API events and creates security findings. Responsible for running shadow API detection, anomaly detection, static OWASP checks, and managing findings."}], "methods": [{"name": "None __init__( self, api_catalog: APIDescriptorRepository, events: EventRepository, findings: FindingRepository, )", "description": "Initializes the DetectionService with repositories and detectors.", "scope": "DetectionService", "scopeKind": "class"}, {"name": "Set[str] _catalog_keys(self)", "description": "Generates a set of string keys representing the current API catalog.", "scope": "DetectionService", "scopeKind": "class"}, {"name": "None _refresh_shadow_catalog(self)", "description": "Updates the shadow detector with the latest API catalog.", "scope": "DetectionService", "scopeKind": "class"}, {"name": "None _create_finding( self, severity: FindingSeverity, title: str, description: str, event: EventRecord, rule_id: Optional[str], extra: Optional[Dict[str, str]] = None, )", "description": "Creates a security finding with optional remediation hints based on the event, severity, and rule matched.", "scope": "DetectionService", "scopeKind": "class"}, {"name": "None on_event_ingested(self, event: EventRecord)", "description": "Main entry point to process a new API event: runs various detectors and creates findings if issues are detected.", "scope": "DetectionService", "scopeKind": "class"}], "calls": ["self._shadow.detect", "self._anomaly.observe", "check_sensitive_header_leak", "check_sensitive_path_method", "check_large_payload", "self._create_finding"], "search-terms": ["DetectionService", "shadow API detection", "anomaly detection", "OWASP static checks", "findings", "orchestration"], "state": 2, "file_id": 12, "knowledge_revision": 37, "git_revision": "503dc9131a87ccadb497670b73542005fae6c333", "revision_history": [{"28": ""}, {"37": "503dc9131a87ccadb497670b73542005fae6c333"}], "ctags": [{"_type": "tag", "name": "DetectionService", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/services.py", "pattern": "/^class DetectionService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/services.py", "pattern": "/^    def __init__($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, api_catalog: APIDescriptorRepository, events: EventRepository, findings: FindingRepository, )", "scope": "DetectionService", "scopeKind": "class"}, {"_type": "tag", "name": "_catalog_keys", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/services.py", "pattern": "/^    def _catalog_keys(self) -> Set[str]:$/", "language": "Python", "typeref": "typename:Set[str]", "kind": "member", "signature": "(self)", "scope": "DetectionService", "scopeKind": "class"}, {"_type": "tag", "name": "_create_finding", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/services.py", "pattern": "/^    def _create_finding($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, severity: FindingSeverity, title: str, description: str, event: EventRecord, rule_id: Optional[str], extra: Optional[Dict[str, str]] = None, )", "scope": "DetectionService", "scopeKind": "class"}, {"_type": "tag", "name": "_refresh_shadow_catalog", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/services.py", "pattern": "/^    def _refresh_shadow_catalog(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "DetectionService", "scopeKind": "class"}, {"_type": "tag", "name": "on_event_ingested", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/services.py", "pattern": "/^    def on_event_ingested(self, event: EventRecord) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, event: EventRecord)", "scope": "DetectionService", "scopeKind": "class"}], "hash": "b65c19d79cf8eafe3297484aeda41e8f", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/services.py"}