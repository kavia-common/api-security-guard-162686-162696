{"is_source_file": true, "format": "Python", "description": "This file implements an adaptive rate limiting middleware for a FastAPI/Starlette application. It contains classes and functions to perform per-key rate limiting with dynamic penalty adjustments, provide status insights, and integrate with repositories for rate limit policies and event logging.", "external_files": ["starlette.middleware.base", "starlette.requests", "starlette.responses", "./models", "./storage"], "external_methods": ["starlette.middleware.base.BaseHTTPMiddleware", "starlette.requests.Request", "starlette.responses.JSONResponse", "starlette.responses.Response"], "published": ["build_adaptive_rate_limiter"], "classes": [{"name": "_WindowCounter", "description": "Manages sliding window counters for hit tracking."}, {"name": "_Penalty", "description": "Handles dynamic penalty factors with decay over time."}, {"name": "AdaptiveRateLimiter", "description": "Core engine implementing adaptive, in-memory rate limiting logic with policies, counters, penalties, and event emission."}, {"name": "AdaptiveRateLimitMiddleware", "description": "Starlette middleware wrapper for integrating the AdaptiveRateLimiter into a FastAPI/Starlette app."}], "methods": [{"name": "_WindowCounter.add_and_allowed", "description": "Adds a hit timestamp and checks if the request is within allowed capacity."}, {"name": "_WindowCounter.count_in_window", "description": "Returns the number of hits within the sliding window."}, {"name": "_Penalty.value", "description": "Calculates current penalty factor considering decay."}, {"name": "_Penalty.apply_penalty", "description": "Increases penalty strictness, moving closer to 0.1."}, {"name": "AdaptiveRateLimiter._endpoint_key", "description": "Generates a string identifier for endpoint based on request."}, {"name": "AdaptiveRateLimiter._extract_api_key", "description": "Extracts API key from request headers."}, {"name": "AdaptiveRateLimiter._scope_key", "description": "Determines scope key (IP, API key, service, endpoint) for rate limiting."}, {"name": "AdaptiveRateLimiter._effective_capacity", "description": "Calculates effective request capacity considering current penalty."}, {"name": "AdaptiveRateLimiter._apply_penalty", "description": "Applies increased penalty to a specific key."}, {"name": "AdaptiveRateLimiter._record_breach_event", "description": "Logs a rate limit breach event into EventRepository."}, {"name": "AdaptiveRateLimiter.evaluate", "description": "Checks if a request breaches rate limits; returns 429 response if breached."}, {"name": "AdaptiveRateLimiter.status", "description": "Provides current status of counters and penalties for observability."}, {"name": "AdaptiveRateLimitMiddleware.dispatch", "description": "Middleware method that enforces rate limits on incoming requests."}, {"name": "AdaptiveRateLimiter build_adaptive_rate_limiter( rate_limits: RateLimitRepository, events: EventRepository, api_catalog: APIDescriptorRepository, service_name: str = \"backend\", )", "description": "Factory function to instantiate AdaptiveRateLimiter for integration.", "scope": "", "scopeKind": ""}, {"name": "None __init__( self, app, limiter: AdaptiveRateLimiter, )", "scope": "AdaptiveRateLimitMiddleware", "scopeKind": "class", "description": "unavailable"}, {"name": "None __init__( self, rate_limits: RateLimitRepository, events: EventRepository, api_catalog: APIDescriptorRepository, service_name: str = \"backend\", )", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "None _apply_penalty(self, key: Tuple[str, str, str], increment: float = 0.2)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "int _effective_capacity(self, base_requests: int, key: Tuple[str, str, str])", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "str _endpoint_key(self, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] _extract_api_key(self, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "None _record_breach_event(self, request: Request, scope: str, scope_key: str, endpoint: str, status_code: int)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] _scope_key(self, scope: str, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "bool add_and_allowed(self, capacity: int, per_seconds: int, now: Optional[datetime] = None)", "scope": "_WindowCounter", "scopeKind": "class", "description": "unavailable"}, {"name": "None apply_penalty(self, increment: float = 0.2)", "scope": "_Penalty", "scopeKind": "class", "description": "unavailable"}, {"name": "int count_in_window(self, per_seconds: int, now: Optional[datetime] = None)", "scope": "_WindowCounter", "scopeKind": "class", "description": "unavailable"}, {"name": "Response dispatch(self, request: Request, call_next)", "scope": "AdaptiveRateLimitMiddleware", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[JSONResponse] evaluate(self, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict status(self)", "scope": "AdaptiveRateLimiter", "scopeKind": "class", "description": "unavailable"}, {"name": "float value(self)", "scope": "_Penalty", "scopeKind": "class", "description": "unavailable"}], "calls": ["self._events.add", "self._rate_limits.list", "self._penalties.setdefault", "counter.add_and_allowed", "self._apply_penalty", "self._record_breach_event", "max", "min", "datetime.utcnow()", "datetime.utcnow()", "max(counter.hits)"], "search-terms": ["adaptive rate limiting", "sliding window counters", "penalty decay", "rate limit middleware", "per-key rate limiting", "dynamic limit adjustment", "event logging rate limit", "FastAPI rate limiter"], "state": 2, "file_id": 13, "knowledge_revision": 32, "git_revision": "", "ctags": [{"_type": "tag", "name": "AdaptiveRateLimitMiddleware", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^class AdaptiveRateLimitMiddleware(BaseHTTPMiddleware):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AdaptiveRateLimiter", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^class AdaptiveRateLimiter:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_Penalty", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^class _Penalty:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_WindowCounter", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^class _WindowCounter:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def __init__($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, app, limiter: AdaptiveRateLimiter, )", "scope": "AdaptiveRateLimitMiddleware", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def __init__($/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "( self, rate_limits: RateLimitRepository, events: EventRepository, api_catalog: APIDescriptorRepository, service_name: str = \"backend\", )", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "_apply_penalty", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def _apply_penalty(self, key: Tuple[str, str, str], increment: float = 0.2) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, key: Tuple[str, str, str], increment: float = 0.2)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "_effective_capacity", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def _effective_capacity(self, base_requests: int, key: Tuple[str, str, str]) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "member", "signature": "(self, base_requests: int, key: Tuple[str, str, str])", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "_endpoint_key", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def _endpoint_key(self, request: Request) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "_extract_api_key", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def _extract_api_key(self, request: Request) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "member", "signature": "(self, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "_record_breach_event", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def _record_breach_event(self, request: Request, scope: str, scope_key: str, endpoint: str, /", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, request: Request, scope: str, scope_key: str, endpoint: str, status_code: int)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "_scope_key", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def _scope_key(self, scope: str, request: Request) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "member", "signature": "(self, scope: str, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "add_and_allowed", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def add_and_allowed(self, capacity: int, per_seconds: int, now: Optional[datetime] = None) -/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, capacity: int, per_seconds: int, now: Optional[datetime] = None)", "scope": "_WindowCounter", "scopeKind": "class"}, {"_type": "tag", "name": "apply_penalty", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def apply_penalty(self, increment: float = 0.2) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, increment: float = 0.2)", "scope": "_Penalty", "scopeKind": "class"}, {"_type": "tag", "name": "build_adaptive_rate_limiter", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^def build_adaptive_rate_limiter($/", "language": "Python", "typeref": "typename:AdaptiveRateLimiter", "kind": "function", "signature": "( rate_limits: RateLimitRepository, events: EventRepository, api_catalog: APIDescriptorRepository, service_name: str = \"backend\", )"}, {"_type": "tag", "name": "count_in_window", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def count_in_window(self, per_seconds: int, now: Optional[datetime] = None) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "member", "signature": "(self, per_seconds: int, now: Optional[datetime] = None)", "scope": "_WindowCounter", "scopeKind": "class"}, {"_type": "tag", "name": "dispatch", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    async def dispatch(self, request: Request, call_next) -> Response:$/", "language": "Python", "typeref": "typename:Response", "kind": "member", "signature": "(self, request: Request, call_next)", "scope": "AdaptiveRateLimitMiddleware", "scopeKind": "class"}, {"_type": "tag", "name": "evaluate", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def evaluate(self, request: Request) -> Optional[JSONResponse]:$/", "language": "Python", "typeref": "typename:Optional[JSONResponse]", "kind": "member", "signature": "(self, request: Request)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "factor", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    factor: float = 1.0$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "_Penalty", "scopeKind": "class"}, {"_type": "tag", "name": "hits", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    hits: List[datetime] = field(default_factory=list)$/", "language": "Python", "typeref": "typename:List[datetime]", "kind": "variable", "scope": "_WindowCounter", "scopeKind": "class"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def status(self) -> Dict:$/", "language": "Python", "typeref": "typename:Dict", "kind": "member", "signature": "(self)", "scope": "AdaptiveRateLimiter", "scopeKind": "class"}, {"_type": "tag", "name": "updated_at", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    updated_at: datetime = field(default_factory=datetime.utcnow)$/", "language": "Python", "typeref": "typename:datetime", "kind": "variable", "scope": "_Penalty", "scopeKind": "class"}, {"_type": "tag", "name": "value", "path": "/home/kavia/workspace/code-generation/api-security-guard-162686-162696/backend/src/api/rate_limit.py", "pattern": "/^    def value(self) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self)", "scope": "_Penalty", "scopeKind": "class"}], "hash": "774a33abade8d13a1d65bff2a279ffd6", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/rate_limit.py", "fields": [{"name": "float factor", "scope": "_Penalty", "scopeKind": "class", "description": "unavailable"}, {"name": "List[datetime] hits", "scope": "_WindowCounter", "scopeKind": "class", "description": "unavailable"}, {"name": "datetime updated_at", "scope": "_Penalty", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"32": ""}]}